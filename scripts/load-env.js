import { writeFile } from 'fs/promises'
import { config } from 'dotenv'

const loadEnv = async () => {
  const DOTENV_KEY = process.env.DOTENV_KEY // Set this in hosting provider's environment variables

  if (!DOTENV_KEY) {
    console.error('No DOTENV_KEY found in process.env\n')

    return
  }

  const envConfig = config({ DOTENV_KEY }) // If DOTENV_KEY found, get the .env.vault, load it to get shared env variables

  if (!envConfig.parsed || Object.keys(envConfig.parsed).length === 0)
    throw new Error('\n\n\nNo .env.vault found or it is empty\n\n\n')

  try {
    await writeFile(
      '.env',
      '# This file is generated by /scripts/load-env.ts\n' +
        '# DO NOT ATTEMPT TO EDIT THIS FILE\n' +
        Object.entries(envConfig.parsed)
          .map(([key, value]) => `${key}=${value}`)
          .join('\n'),
    )

    console.log('\n\n\nSuccessfully loaded .env.vault to .env\n\n\n')
  } catch (error) {
    console.error('\n\n\nFailed to load .env.vault to .env', error, '\n\n\n')
  }
}

loadEnv()
